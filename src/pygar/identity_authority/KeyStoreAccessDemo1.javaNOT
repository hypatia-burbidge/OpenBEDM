	/****************************************************************CopyrightNotice
	 * Copyright (c) 2011 WWN Software LLC 
	 * All rights reserved. This program and the accompanying materials
	 * are made available under the terms of the Pygar Public License v1.0
	 * which accompanies this distribution, and is available at
	 * http://ectn.typepad.com/pygar/pygar-public-license.html
	 *
	 * Contributors:
	 *    Paul Baker, WWN Software LLC
	 *******************************************************************************/

package pygar.identity_authority;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.cert.*;
import java.security.InvalidKeyException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Vector;

import net.jcip.annotations.ThreadSafe;
import pygar.configuration.Dangerous;
import pygar.configuration.RestrictedImport;
import pygar.cryptography.CryptoException;

/**
 * The KeyStoreAccessDemo1 class implements the KeyStoreAccess abstract class
 * in a manner sufficient for the demonstration. However, it reads the
 * demonstration's passwords from a clear text property file -- not secure!
 * It also assumes the special directory structure of 
 * the demonstration. Also, note that it must be initialized with the name
 * of the current application which by the assumptions that we make
 * in the code will be the name of a directory where information is stored
 * as well as the alias of the current user in the keystore. 
 * <p>
 * Finally, the Java JRE does not appear to implement keystores for SecretKeys,
 * therefore, we cannot get the session keystore procedure to work. 
 * </p>
 * @author pbaker
 *
 */
@Dangerous
@RestrictedImport
@ThreadSafe
public class KeyStoreAccessDemo1 extends KeyStoreAccess {

	private String keystorePassword;
	private String entryPassword;
	private String keystoreDir;
	
	
	public KeyStoreAccessDemo1(String entityName, Properties props) {
		currentEntity = entityName;
		keystorePassword = props.getProperty("keystorePassword");
		entryPassword = props.getProperty("entryPassword");
		keystoreDir = props.getProperty("keystoreDir");
	}

	/** Return the KeyStore for the entity that is running the current application.
	 * 
	 * @param kst The type of the keystore desired
	 * @return the KeyStore
	 * @throws Exception 
	 */
	public KeyStore getKeyStore(KeyStoreType kst) throws Exception {
		
		String storeName;
		switch (kst) {
		case PRIVATE:
			storeName = "private.keystore";
			break;
		case PUBLIC:
			storeName = "public.keystore";
			break;
		case SESSION:
			storeName = "session.keystore";
			System.err.println("Class KeyStoreAccessDemo1 cannot implement a session keystore.");
			throw new CryptoException();
		default:
			storeName = "";
		}

		char [] passwd = keystorePassword.toCharArray();
		try {
			KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

			String filename = keystoreDir + File.separator + storeName;
			System.out.println("KeyStoreAccess ready to open " + filename);
			FileInputStream fs = new FileInputStream( filename);
			System.out.println("ready to load");
			ks.load(fs, passwd);
			return ks;
		} catch (KeyStoreException e) {
			e.printStackTrace();
			throw new Exception();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			throw new Exception();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			throw new Exception();
		} catch (CertificateException e) {
			e.printStackTrace();
			throw new Exception();
		} catch (IOException e) {
			e.printStackTrace();
			throw new Exception();
		}
	}
	
	/**
	 * Instances of this nested class can hold the aliases and public keys for 
	 * the entities in the KeyStore. 
	 * @author pbaker
	 *
	 */
	public class PublicKeys {
		public List<String> aliasList;
		public Map<String,PublicKey> publicKeys;
	}
	
	/**
	 * Get an instance containing the aliases and public keys in the keystore. 
	 * Note that any number of exceptions might be raised by the underlying 
	 * cryptographic procedures.
	 * 
	 * @param ks
	 * @throws KeyStoreException
	 * @throws InvalidKeyException
	 * @throws CertificateException
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException
	 * @throws SignatureException
	 */
	public PublicKeys getPublicKeys(KeyStore ks) throws KeyStoreException, InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {
		PublicKeys pks = new PublicKeys();
		pks.aliasList = new Vector<String>();
		pks.publicKeys =  new HashMap<String,PublicKey>();
		Enumeration<String> aliases = ks.aliases();
		Certificate cert;
		String alias;
		// get the certificates, verify that they are signed properly
		// and convert the enumeration of aliases into a list
		while( aliases.hasMoreElements()) {
			alias = aliases.nextElement();
			cert = ks.getCertificate(alias);
			cert.verify(cert.getPublicKey());
			pks.aliasList.add(alias);
			pks.publicKeys.put(alias, cert.getPublicKey());
		}
		return pks;
		
	}

	public static void main(String[] args) throws Exception {
		// try out the class
		// get property file
		Properties props = new Properties();
		FileInputStream fprops = new FileInputStream(
				"/Users/pbaker/Coding/OpenBEDM/demo1/identities/BAN/config/demo1.props");
		
		props.load(fprops);
		// create and instance
		KeyStoreAccessDemo1 ksAccess = new KeyStoreAccessDemo1("BAN", props);
		// get the public key registrations
		KeyStore ks = ksAccess.getKeyStore(KeyStoreType.PUBLIC);
		// print the entity names (aliases)
		String alias;
		PublicKeys keys = ksAccess.getPublicKeys(ks); 
		Iterator<String> k = keys.aliasList.iterator();
		while (k.hasNext()) {
			alias = k.next();
			System.out.printf("entity:%s, cert:%s%n", alias, keys.publicKeys.get(alias).toString());
			
		}
	}

}
